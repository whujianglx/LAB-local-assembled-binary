/----------------------------------------------------------------------Matrix类-------------------------------------------------------------------/
class Matrix<Type>;

成员

	bool Est; //是否新建矩阵
	bool String; //是否为char *类型字符串矩阵
	int line; //行数
	int list; //列数
	Type * _begin; //数据表起始地址

枚举类型

	enum Method{M_Line,M_List};//行方法；列方法
	enum Sequence{Geometric,Arismetic};//等比方法；等差方法

成员函数

	Matrix();                             //构造函数
	
        新建 清除 读取元素值

	int NewM(int x,int y,const Type c=0); //新建一个矩阵 x行 y列 用c来填充  返还1 表示正确新建
	void CleM();                          //清除已建立的矩阵
	Type Value(int x,int y);              //返还矩阵中 a(x,y)值

	数据写入

	int Write_Array(Type * &con,int num);   //用数组填充矩阵 数组首地址  填充个数 返还1表示正确写入
	int Write_In(int x,int y,Type content); //单个 写入 a(x,y)=content 返还1表示正确写入
	int Transposition(void);                //矩阵转置 返还1 成功转置
	int Write_All(Type Beg=0,Method method=M_Line,Sequence line_sequence=Arismetic,Type line_step=0,Sequence list_sequence=Arismetic,Type list_step=0);
	//给矩阵赋值
	//a(0,0)；填充方式：行优先/列优先；行方法；行步长；列方法；列步长
	// 1 正确返还
	/* Example 
		(x,Matrix<Type>::M_Line,Matrix<Type>::Arismetic,(Type)a,Matrix<Type>::Geometric,(Type)b) 
		           | x      x*b       x*b*b      |
			   | x+a    (x+a)*b   (x+a)*b*b  |
			   | x+2a   (x+2a)*b  (x+2a)*b*b |
		                                                    						*/	
       
	打印函数 查找函数 元素简单求和

	int Print(int digit=5);                 //打印矩阵 digit 输出字符距离控制 返回1 表示正确输出 |用于C++控制台
	int Equal_Fac_Normal(Type st,int *  &Dir);//查找函数 st 查找内容;Dir 输出下标数组的首地址 两个int表示一个元素 返回找到的元素个数|用于数字
	int Equal_Fac_String(Type st,int * &Dir); //查找函数 st 查找内容;Dir 输出下标数组的首地址 两个int表示一个元素 返回找到的元素个数|用于char *
	int Se_Max_Min(int * &Dir,bool i=0);      //查找最大最小值 Dir 输出下标数组的首地址 两个int表示一个元素;bool 0最大值 !0最小值 返回找到的元素个数|用于数字
	Type Sum_Line(int li);                  //求行和 li 行数
	Type Sum_List(int li);                  //求列和 li 列数
	Type Sum_All(void);                     //求全部元素加和

	行列式功能 
	
	Type Trace(void);                    //求迹
	double Determinant_Value(void);      //求行列式的值
		
	矩阵功能
    
	int E_Exchange(int i,int j,Method met=M_Line);          //行列互换 i j 行方法/列方法 返还1成功
	int E_Multiply(int i,Type fac,Method met=M_Line);       //倍乘 i fac 乘数 行方法/列方法 返还1成功
	int E_Divide(int i,Type fac,Method met=M_Line);         //倍除 i fac 除数 行方法/列方法 返还1成功	   
	int E_Add_Mul(int i,int j,Type fac=1,Method met=M_Line);//倍加 j加到i fac 乘数  行方法/列方法 返还1成功
        int E_Add_Div(int i,int j,Type fac=1,Method met=M_Line);//倍加 j加到i fac 除数  行方法/列方法 返还1成功        
	Matrix<double>  Echelon_M(char step=0);                 //化成阶梯矩阵 返还一个double型矩阵 0\1\2++ 表示化简程度的递进
	int Rank_M(void);                                       //求秩
	
	运算符重载
			
	void operator=(Matrix<Type> &ma );        // = A=B
	Matrix<Type> operator~(void);             // ~ A^T 转置
	Matrix<Type> operator-(void);             // -(负号)  -A		
	Matrix<Type> operator*(Type ma);          // * A*b
	Matrix<Type> operator*(Matrix<Type> &ma); // * A*B
	Matrix<Type> operator-(Type ma);          // - A-b
	Matrix<Type> operator-(Matrix<Type> &ma); // - A-B
	Matrix<Type> operator/(Type ma);          // / A/b
	Matrix<Type> operator+(Type ma);          // + A+b
	Matrix<Type> operator+(Matrix<Type> &ma); // + A+B

	

	


